.keyboard {
    background: palegreen;

    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;

    height: auto;

    transform: translateX(100vw);
}
.keyboard.active {
    transform: translateX(0);
}

.keyboard.num {
    display: grid;
    grid-gap: .5rem;
    grid-template-columns: 1fr repeat(3, 3rem) 1fr;
    grid-template-areas: '. left middle right .';
    grid-template-rows: repeat(4, 2rem);
}
.keyboard.num button.char {
    display: none;
}
.keyboard.num button {
    height: 2rem;
}
.keyboard.num button.num:nth-child(3n-2) {
    grid-column: left / span 1;
}
.keyboard.num button.num:nth-child(3n-1) {
    grid-column: middle / span 1;
}
.keyboard.num button.num:nth-child(3n) {
    grid-column: right / span 1;
}
.keyboard.num button.delete {
    grid-column: left / span 1;
}
.keyboard.num button.return {
    grid-column: right / span 1;
}

.keyboard.char {
    --key-size: 1.6rem;

    display: flex;
    flex-direction: column;
    align-items: center;
    padding-block: .8em;
}
.keyboard.char .row {
    margin-block: .2rem;
}
.keyboard.char button { 
    height: var(--key-size); 
}
.keyboard.char button:is(.char, .num) {
    width: var(--key-size);
    margin-inline: .01rem;
}
.keyboard.char .row:last-child { 
    width: 50%; 
}
.keyboard.char button.space { 
    width: 100%; 
}
.keyboard.char button.func:not(.keyboard.char button.func.space) {
    width: calc(var(--key-size) * 2);
}

